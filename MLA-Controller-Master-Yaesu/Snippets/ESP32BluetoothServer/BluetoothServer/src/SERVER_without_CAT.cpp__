#include <Arduino.h>
#include <BLEDevice.h>
#include <BLEUtils.h>
#include <BLEServer.h>

#define SERVICE_UUID "f789b9d5-bc7e-438a-891c-5f9dce9c37a3"
#define NOTIFY_CHAR_UUID "bd294fde-579c-41f8-b05a-72cbbd1dbf1f"
#define WRITE_CHAR_UUID "c36a7a4b-7d5e-4bb8-9212-f5d08ef5d69e"

BLEServer* pServer;
BLECharacteristic* pNotifyCharacteristic;
BLECharacteristic* pWriteCharacteristic;
bool deviceConnected = false;
bool isAdvertising = false;

unsigned long VFOFrequency = 14100000;  // Example frequency in Hz
String Mode = "USB";                    // Example mode
String PTTStatus = "OFF";               // Example PTT status
int RFPower = 50;                       // Example RF power in watts
float SWR = 1.5;                        // Example SWR

// Callback to handle writes from the client
class MyWriteCallback : public BLECharacteristicCallbacks {
  void onWrite(BLECharacteristic* pCharacteristic) {
    std::string value = pCharacteristic->getValue();
    if (value.length() > 0) {
      Serial.print("Received message: ");
      Serial.println(value.c_str());

      // Process received message
      String receivedData = String(value.c_str());
     
    }
  }
};

class MyServerCallbacks : public BLEServerCallbacks {
  void onConnect(BLEServer* pServer) {
    Serial.println("Client connected!");
    deviceConnected = true;
    isAdvertising = false;
  }

  void onDisconnect(BLEServer* pServer) {
    Serial.println("Client disconnected. Restarting advertising...");
    deviceConnected = false;
    BLEDevice::startAdvertising();
    isAdvertising = true;
  }
};

void setup() {
  Serial.begin(115200);
  delay(5000);
  Serial.println("Starting BLE Server...");

  BLEDevice::init("Sequential Data Server");
  pServer = BLEDevice::createServer();
  pServer->setCallbacks(new MyServerCallbacks());

  BLEService* pService = pServer->createService(SERVICE_UUID);

  // Notification characteristic
  pNotifyCharacteristic = pService->createCharacteristic(
    NOTIFY_CHAR_UUID,
    BLECharacteristic::PROPERTY_READ | BLECharacteristic::PROPERTY_NOTIFY
  );

  pNotifyCharacteristic->setValue("0");

  // Write characteristic
  pWriteCharacteristic = pService->createCharacteristic(
    WRITE_CHAR_UUID,
    BLECharacteristic::PROPERTY_WRITE
  );
  pWriteCharacteristic->setCallbacks(new MyWriteCallback()); // Attach the write callback

  pService->start();

  BLEAdvertising* pAdvertising = BLEDevice::getAdvertising();
  pAdvertising->addServiceUUID(SERVICE_UUID);
  BLEDevice::startAdvertising();
  isAdvertising = true;

  Serial.println("Server ready and advertising...");
}

void loop() {
  if (deviceConnected) {
    // Send VFOFrequency
    String message = "FREQ:" + String(VFOFrequency);
    pNotifyCharacteristic->setValue(message.c_str());
    pNotifyCharacteristic->notify();
    Serial.println("Sent: " + message);

    // Send Mode
    message = "MODE:" + Mode;
    pNotifyCharacteristic->setValue(message.c_str());
    pNotifyCharacteristic->notify();
    Serial.println("Sent: " + message);

    // Send PTTStatus
    message = "PTT:" + PTTStatus;
    pNotifyCharacteristic->setValue(message.c_str());
    pNotifyCharacteristic->notify();
    Serial.println("Sent: " + message);

    // Send RFPower
    message = "POWER:" + String(RFPower);
    pNotifyCharacteristic->setValue(message.c_str());
    pNotifyCharacteristic->notify();
    Serial.println("Sent: " + message);

    // Send SWR
    message = "SWR:" + String(SWR);
    pNotifyCharacteristic->setValue(message.c_str());
    pNotifyCharacteristic->notify();
    Serial.println("Sent: " + message);

    delay(500); // Adjust as needed for sending frequency
  }

  if (!deviceConnected && !isAdvertising) {
    Serial.println("Restarting advertising...");
    BLEDevice::startAdvertising();
    isAdvertising = true;
  }
}
