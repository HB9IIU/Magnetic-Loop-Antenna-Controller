#include <WiFi.h>
#include <WiFiMulti.h>
#include <WebSocketsClient.h>

WiFiMulti WiFiMulti;             // Handles multiple Wi-Fi connections
WebSocketsClient webSocket;      // WebSocket client instance

#define USE_SERIAL Serial        // Define which Serial port to use

// WebSocket server details
const char *ssid = "HB9IIU-MLA";
const char *password = "";       // Leave empty for an open network
const char *serverIP = "192.168.4.10";  // WebSocket server IP
const int serverPort = 8765;     // WebSocket server port

void hexdump(const void *mem, uint32_t len, uint8_t cols = 16) {
    const uint8_t *src = (const uint8_t *)mem;
    USE_SERIAL.printf("\n[HEXDUMP] Address: 0x%08X len: 0x%X (%d)", (ptrdiff_t)src, len, len);
    for (uint32_t i = 0; i < len; i++) {
        if (i % cols == 0) {
            USE_SERIAL.printf("\n[0x%08X] 0x%08X: ", (ptrdiff_t)src, i);
        }
        USE_SERIAL.printf("%02X ", *src);
        src++;
    }
    USE_SERIAL.printf("\n");
}

void webSocketEvent(WStype_t type, uint8_t *payload, size_t length) {
    switch (type) {
    case WStype_DISCONNECTED:
        USE_SERIAL.printf("[WSc] Disconnected!\n");
        break;
    case WStype_CONNECTED:
        USE_SERIAL.printf("[WSc] Connected to url: %s\n", payload);
        // Send a message to the server when connected
        webSocket.sendTXT("Hello from ESP32 client!");
        break;
    case WStype_TEXT:
        USE_SERIAL.printf("[WSc] Received text: %s\n", payload);
        break;
    case WStype_BIN:
        USE_SERIAL.printf("[WSc] Received binary length: %u\n", length);
        hexdump(payload, length);
        break;
    case WStype_ERROR:
        USE_SERIAL.println("[WSc] Error occurred!");
        break;
    default:
        USE_SERIAL.printf("[WSc] Unknown WebSocket event type: %d\n", type);
        break;
    }
}

void setup() {
    // Initialize serial communication
    USE_SERIAL.begin(115200);
    USE_SERIAL.println("\n\n[SETUP] Starting ESP32 WebSocket client...");

    // Connect to Wi-Fi
    WiFiMulti.addAP(ssid, password);
    while (WiFiMulti.run() != WL_CONNECTED) {
        delay(100);
        USE_SERIAL.print(".");
    }
    USE_SERIAL.println("\nWi-Fi connected!");
    USE_SERIAL.print("IP Address: ");
    USE_SERIAL.println(WiFi.localIP());

    // Initialize WebSocket connection
    USE_SERIAL.println("[SETUP] Connecting to WebSocket server...");
    webSocket.begin(serverIP, serverPort, "/");
    webSocket.onEvent(webSocketEvent);
    webSocket.setReconnectInterval(5000); // Retry every 5 seconds if disconnected
}

void loop() {
    webSocket.loop();
}
