#include <Arduino.h>
#include <LittleFS.h>
#include <TFT_eSPI.h> // Include the TFT_eSPI library

// Create an instance of the TFT screen
TFT_eSPI tft = TFT_eSPI(); // Use default settings from platformio.ini

void setup()
{
  // Initialize Serial communication for debugging
  Serial.begin(115200);
  delay(1000); // Give time for the Serial monitor to initialize

  Serial.println();
  Serial.println("ESP32 Chip Information:");

  // Print ESP32 chip information
  esp_chip_info_t chip_info;
  esp_chip_info(&chip_info);
  Serial.printf("Chip model: %s\n", (chip_info.model == CHIP_ESP32) ? "ESP32" : "Unknown");
  Serial.printf("Number of cores: %d\n", chip_info.cores);
  Serial.printf("Chip revision: %d\n", chip_info.revision);
  Serial.printf("Flash size: %dMB\n", spi_flash_get_chip_size() / (1024 * 1024));

  // Initialize LittleFS (file system for storing calibration data, etc.)
  if (!LittleFS.begin(true)) // 'true' formats the filesystem if mounting fails
  {
    Serial.println("Failed to mount LittleFS, formatting...");
  }
  else
  {
    Serial.println("LittleFS mounted successfully");
  }

  // Check if the calibration data file exists
  if (LittleFS.exists("/TouchCalData"))
  {
    Serial.println("TouchCalData file exists");
  }
  else
  {
    Serial.println("TouchCalData file does not exist, creating it...");
    // Attempt to create the file
    fs::File f = LittleFS.open("/TouchCalData", "w");
    if (!f)
    {
      Serial.println("Failed to create TouchCalData file");
    }
    else
    {
      Serial.println("TouchCalData file created successfully");
      f.close(); // Close the file after creation
    }
  }

  // Initialize the TFT screen
  tft.init();                 // Initialize the TFT
  tft.setRotation(1);         // Set screen orientation (0, 1, 2, or 3 for rotation)
  pinMode(TFT_BLP, OUTPUT);   // Configure the backlight pin
  digitalWrite(TFT_BLP, HIGH); // Turn on the backlight

  // Clear the screen and display a welcome message
  tft.fillScreen(TFT_BLACK);  // Clear the screen to black
  tft.setTextColor(TFT_WHITE); // Set text color to white
  tft.setTextSize(2);         // Set text size multiplier
  tft.setCursor(10, 10);      // Position the cursor
  tft.print("TFT Test");      // Display "TFT Test"

  // Draw some basic shapes on the screen
  tft.fillRect(50, 50, 100, 50, TFT_BLUE);  // Draw a filled blue rectangle
  tft.drawCircle(150, 150, 50, TFT_RED);    // Draw a red circle outline
  tft.fillCircle(150, 150, 25, TFT_GREEN);  // Draw a filled green circle

  // Configure text font and size for the main loop
  tft.setTextFont(7); // Set font to Font7 (customizable)
  tft.setTextSize(1); // Set text size multiplier to 1 (default size)
}

void loop()
{
  int touchTFT = 0;

  // Get the current touch pressure
  touchTFT = tft.getTouchRawZ();

  // If touch pressure exceeds threshold, display the value on the screen
  if (touchTFT > 500)
  {
    // Clear the area where the text is displayed by drawing a black rectangle
    tft.fillRect(300, 200, 200, 80, TFT_BLACK); // Clear previous text area (adjust size as needed)

    // Set cursor position for the text
    tft.setCursor(300, 200);

    // Set text color and print the touch value
    tft.setTextColor(TFT_WHITE); // Set text color to white
    tft.print(touchTFT);         // Display the touch pressure value

    delay(100); // Small delay to avoid rapid updates
  }
}
